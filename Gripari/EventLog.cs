// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EventLog.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Hucksters.Gripari.Output {

  /// <summary>Holder for reflection information generated from EventLog.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class EventLogReflection {

    #region Descriptor
    /// <summary>File descriptor for EventLog.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventLogReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5FdmVudExvZy5wcm90bxIIZm9ydmFyZXQiYAoIRXZlbnRMb2cSJAoIc2V2",
            "ZXJpdHkYASABKA4yEi5mb3J2YXJldC5TZXZlcml0eRIRCgl0aW1lc3RhbXAY",
            "AiABKAESCwoDbXNnGAMgASgJEg4KBnNvdXJjZRgEIAEoCSIxCglFdmVudExv",
            "Z3MSJAoIZW50aXRpZXMYASADKAsyEi5mb3J2YXJldC5FdmVudExvZyoqCghT",
            "ZXZlcml0eRIICgRJTkZPEAASCQoFRVJST1IQARIJCgVERUJVRxACQhuqAhhI",
            "dWNrc3RlcnMuR3JpcGFyaS5PdXRwdXRiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Hucksters.Gripari.Output.Severity), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Hucksters.Gripari.Output.EventLog), global::Hucksters.Gripari.Output.EventLog.Parser, new[]{ "Severity", "Timestamp", "Msg", "Source" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Hucksters.Gripari.Output.EventLogs), global::Hucksters.Gripari.Output.EventLogs.Parser, new[]{ "Entities" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum Severity {
    [pbr::OriginalName("INFO")] Info = 0,
    [pbr::OriginalName("ERROR")] Error = 1,
    [pbr::OriginalName("DEBUG")] Debug = 2,
  }

  #endregion

  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EventLog : pb::IMessage<EventLog> {
    private static readonly pb::MessageParser<EventLog> _parser = new pb::MessageParser<EventLog>(() => new EventLog());
    public static pb::MessageParser<EventLog> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Hucksters.Gripari.Output.EventLogReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public EventLog() {
      OnConstruction();
    }

    partial void OnConstruction();

    public EventLog(EventLog other) : this() {
      severity_ = other.severity_;
      timestamp_ = other.timestamp_;
      msg_ = other.msg_;
      source_ = other.source_;
    }

    public EventLog Clone() {
      return new EventLog(this);
    }

    /// <summary>Field number for the "severity" field.</summary>
    public const int SeverityFieldNumber = 1;
    private global::Hucksters.Gripari.Output.Severity severity_ = 0;
    public global::Hucksters.Gripari.Output.Severity Severity {
      get { return severity_; }
      set {
        severity_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private double timestamp_;
    public double Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 3;
    private string msg_ = "";
    public string Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 4;
    private string source_ = "";
    public string Source {
      get { return source_; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as EventLog);
    }

    public bool Equals(EventLog other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Severity != other.Severity) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Msg != other.Msg) return false;
      if (Source != other.Source) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Severity != 0) hash ^= Severity.GetHashCode();
      if (Timestamp != 0D) hash ^= Timestamp.GetHashCode();
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      if (Source.Length != 0) hash ^= Source.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Severity != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Severity);
      }
      if (Timestamp != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Timestamp);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Msg);
      }
      if (Source.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Source);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Severity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Severity);
      }
      if (Timestamp != 0D) {
        size += 1 + 8;
      }
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      if (Source.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      return size;
    }

    public void MergeFrom(EventLog other) {
      if (other == null) {
        return;
      }
      if (other.Severity != 0) {
        Severity = other.Severity;
      }
      if (other.Timestamp != 0D) {
        Timestamp = other.Timestamp;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
      if (other.Source.Length != 0) {
        Source = other.Source;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            severity_ = (global::Hucksters.Gripari.Output.Severity) input.ReadEnum();
            break;
          }
          case 17: {
            Timestamp = input.ReadDouble();
            break;
          }
          case 26: {
            Msg = input.ReadString();
            break;
          }
          case 34: {
            Source = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EventLogs : pb::IMessage<EventLogs> {
    private static readonly pb::MessageParser<EventLogs> _parser = new pb::MessageParser<EventLogs>(() => new EventLogs());
    public static pb::MessageParser<EventLogs> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Hucksters.Gripari.Output.EventLogReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public EventLogs() {
      OnConstruction();
    }

    partial void OnConstruction();

    public EventLogs(EventLogs other) : this() {
      entities_ = other.entities_.Clone();
    }

    public EventLogs Clone() {
      return new EventLogs(this);
    }

    /// <summary>Field number for the "entities" field.</summary>
    public const int EntitiesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Hucksters.Gripari.Output.EventLog> _repeated_entities_codec
        = pb::FieldCodec.ForMessage(10, global::Hucksters.Gripari.Output.EventLog.Parser);
    private readonly pbc::RepeatedField<global::Hucksters.Gripari.Output.EventLog> entities_ = new pbc::RepeatedField<global::Hucksters.Gripari.Output.EventLog>();
    public pbc::RepeatedField<global::Hucksters.Gripari.Output.EventLog> Entities {
      get { return entities_; }
    }

    public override bool Equals(object other) {
      return Equals(other as EventLogs);
    }

    public bool Equals(EventLogs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!entities_.Equals(other.entities_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= entities_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      entities_.WriteTo(output, _repeated_entities_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += entities_.CalculateSize(_repeated_entities_codec);
      return size;
    }

    public void MergeFrom(EventLogs other) {
      if (other == null) {
        return;
      }
      entities_.Add(other.entities_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            entities_.AddEntriesFrom(input, _repeated_entities_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
